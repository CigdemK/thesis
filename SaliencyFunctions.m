function F = SaliencyFunctions
%     TimerScript;
    F.SaveEyeFixationForLeMeur = @SaveEyeFixationForLeMeur;
    F.SaveFramesForLeMeur = @SaveFramesForLeMeur;
    F.CalculateSaliency = @CalculateSaliency;
    F.PlotROC = @PlotROC;
    F.ReadRValuesFromFiles = @ReadRValuesFromFiles;
    F.SaveOpticalFlowData = @SaveOpticalFlowData;
    F.TrainGaussCenterPredicter = @TrainGaussCenterPredicter;
    F.SaveHomographyData = @SaveHomographyData;
    F.SaveImprovedTrajectoriesDescriptors = @SaveImprovedTrajectoriesDescriptors;
    F.PrepareIOForNN_OpticalFlow = @PrepareIOForNN_OpticalFlow;
    F.PrepareIOForNN_Trajectory = @PrepareIOForNN_Trajectory;

end

%% PUBLIC FUNCTIONS
function SaveEyeFixationForLeMeur(folderName)

    warning('off', 'MATLAB:MKDIR:DirectoryExists');
    
    movieNames = {'actioncliptrain00001.avi', ...
                'actioncliptrain00002.avi', ...
                'actioncliptrain00003.avi', ...
                'actioncliptrain00004.avi', ...
                'actioncliptrain00005.avi', ...
                'actioncliptrain00006.avi', ...
                'actioncliptrain00007.avi', ...
                'actioncliptrain00008.avi', ...
                'actioncliptrain00009.avi', ...
                'actioncliptrain00010.avi', ...
                'actioncliptrain00011.avi', ...
                'actioncliptrain00012.avi', ...
                'actioncliptrain00013.avi', ...
                'actioncliptrain00014.avi', ...
                'actioncliptrain00015.avi', ...
                'actioncliptrain00016.avi', ...
                'actioncliptrain00017.avi', ...
                'actioncliptrain00018.avi', ...
                'actioncliptrain00019.avi', ...
                'actioncliptrain00020.avi', ...
                'actioncliptrain00021.avi', ...
                'actioncliptrain00022.avi', ...
                'actioncliptrain00023.avi', ...
                'actioncliptrain00024.avi', ...
                'actioncliptrain00025.avi', ...
                'actioncliptrain00026.avi', ...
                'actioncliptrain00027.avi', ...
                'actioncliptrain00028.avi', ...
                'actioncliptrain00029.avi', ...
                'actioncliptrain00030.avi'};

% movieNames = {'Diving-Side/001/2538-5_70133.avi', ...
%                 'Diving-Side/002/2538-11_70015.avi', ...
%                 'Golf-Swing-Back/001/3283-8_700741.avi', ...
%                 'Golf-Swing-Back/002/3283-8_701201.avi', ...
%                 'Golf-Swing-Front/001/7603-4_70159.avi', ...
%                 'Golf-Swing-Front/002/7608-9_70(2)151.avi', ...
%                 'Golf-Swing-Side/001/RF1-13207_7015.avi', ...
%                 'Golf-Swing-Side/002/RF1-11456_70034.avi', ...
%                 'Kicking-Front/001/778-62_l146.avi', ...
%                 'Kicking-Front/002/1084-44_l865.avi', ...
%                 'Kicking-Side/001/3833-15_70577.avi', ...
%                 'Kicking-Side/002/3833-40_70336.avi', ...
%                 'Lifting/001/3528-8_70514.avi', ...
%                 'Lifting/002/2502-2_70340.avi', ...
%                 'Riding-Horse/001/4456-16_700040.avi', ...
%                 'Riding-Horse/002/4456-16_700165.avi', ...
%                 'Run-Side/001/2670-5_70111.avi', ...
%                 'Run-Side/002/5238-17_700000.avi', ...
%                 'SkateBoarding-Front/001/708-75070.avi', ...
%                 'SkateBoarding-Front/002/708-77009.avi', ...
%                 'Swing-Bench/001/669-60084.avi', ...
%                 'Swing-Bench/002/669-60176.avi', ...
%                 'Swing-SideAngle/001/vid1_0117.avi', ...
%                 'Swing-SideAngle/002/vid1_0461.avi', ...
%                 'Walk-Front/001/3206-12_70000.avi',...
%                 'Walk-Front/002/5561-7_70102.avi'};  
    
    Reader = ReadFunctions;
    Util = UtilFunctions;
    tic;
    for i = 1:size(movieNames,2)
        
        fileName = movieNames{i};
        
        [~,nFrames,~,~,~,vidDuration] = Reader.ReadData(folderName,fileName);
        resultMap = Reader.ReadEyeTrackingData(fileName,folderName);
        resultMap.vidDuration = vidDuration;
        resultMap.nFrames = nFrames;
        saliencyPoints = Util.CalculateMapping(resultMap);

        for k = 1:nFrames
            
            strToWrite = [];
            for subject = 1:19
                indices = find(saliencyPoints( : , 2 ) == k & saliencyPoints( : , 1 ) == subject);

                for t = 1:size(indices,1)
                    x = saliencyPoints(indices(t),4);
                    y = saliencyPoints(indices(t),3);
                    strToWrite = [strToWrite num2str(x) ' ' num2str(y) ' 20 '] ;
                end
                if ~isempty(indices)
                    strToWrite = [strToWrite '-1 -1 -1\n'];
                end

            end

            strToWrite = [strToWrite '-1 -1 -1'];

            regexResult = regexp(movieNames(i),'.avi','split');
            mkdir([folderName regexResult{1}{1}]);
            fid = fopen( strcat(folderName,regexResult{1}{1},'/frame_',num2str(k),'.stat'), 'wt' );
%             fid = fopen( strcat(folderName,regexResult{1}{1},'/',regexResult{1}{2},'/frame_',num2str(k),'.stat'), 'wt' );
            fprintf(fid,strToWrite);
            fclose(fid);
              
        end
        toc;
    end
    
end

function SaveFramesForLeMeur(folderName)

    warning('off', 'MATLAB:MKDIR:DirectoryExists');

%     movieNames = {'Diving-Side/001/2538-5_70133.avi', ...
%                 'Diving-Side/002/2538-11_70015.avi', ...
%                 'Golf-Swing-Back/001/3283-8_700741.avi', ...
%                 'Golf-Swing-Back/002/3283-8_701201.avi', ...
%                 'Golf-Swing-Front/001/7603-4_70159.avi', ...
%                 'Golf-Swing-Front/002/7608-9_70(2)151.avi', ...
%                 'Golf-Swing-Side/001/RF1-13207_7015.avi', ...
%                 'Golf-Swing-Side/002/RF1-11456_70034.avi', ...
%                 'Kicking-Front/001/778-62_l146.avi', ...
%                 'Kicking-Front/002/1084-44_l865.avi', ...
%                 'Kicking-Side/001/3833-15_70577.avi', ...
%                 'Kicking-Side/002/3833-40_70336.avi', ...
%                 'Lifting/001/3528-8_70514.avi', ...
%                 'Lifting/002/2502-2_70340.avi', ...
%                 'Riding-Horse/001/4456-16_700040.avi', ...
%                 'Riding-Horse/002/4456-16_700165.avi', ...
%                 'Run-Side/001/2670-5_70111.avi', ...
%                 'Run-Side/002/5238-17_700000.avi', ...
%                 'SkateBoarding-Front/001/708-75070.avi', ...
%                 'SkateBoarding-Front/002/708-77009.avi', ...
%                 'Swing-Bench/001/669-60084.avi', ...
%                 'Swing-Bench/002/669-60176.avi', ...
%                 'Swing-SideAngle/001/vid1_0117.avi', ...
%                 'Swing-SideAngle/002/vid1_0461.avi', ...
%                 'Walk-Front/001/3206-12_70000.avi',...
%                 'Walk-Front/002/5561-7_70102.avi'};  

    movieNames = {'actionclipautoautotrain00001.avi', ...
                'actionclipautoautotrain00002.avi', ...
                'actionclipautoautotrain00003.avi', ...
                'actionclipautoautotrain00004.avi', ...
                'actionclipautoautotrain00005.avi', ...
                'actionclipautoautotrain00006.avi', ...
                'actionclipautoautotrain00007.avi', ...
                'actionclipautoautotrain00008.avi', ...
                'actionclipautoautotrain00009.avi', ...
                'actionclipautoautotrain00010.avi', ...
                'actionclipautoautotrain00011.avi', ...
                'actionclipautoautotrain00012.avi', ...
                'actionclipautoautotrain00013.avi', ...
                'actionclipautoautotrain00014.avi', ...
                'actionclipautoautotrain00015.avi', ...
                'actionclipautoautotrain00016.avi', ...
                'actionclipautoautotrain00017.avi', ...
                'actionclipautoautotrain00018.avi', ...
                'actionclipautoautotrain00019.avi', ...
                'actionclipautoautotrain00020.avi', ...
                'actionclipautoautotrain00021.avi', ...
                'actionclipautoautotrain00022.avi', ...
                'actionclipautoautotrain00023.avi', ...
                'actionclipautoautotrain00024.avi', ...
                'actionclipautoautotrain00025.avi', ...
                'actionclipautoautotrain00026.avi', ...
                'actionclipautoautotrain00027.avi', ...
                'actionclipautoautotrain00028.avi', ...
                'actionclipautoautotrain00029.avi', ...
                'actionclipautoautotrain00030.avi'};
    
    Reader = ReadFunctions;
    tic;
    for i = 1:size(movieNames,2)
       
        regexResult = regexp(movieNames(i),'.avi','split');
        fileName = strcat(regexResult{1}{1},'/');
        
        [~,nFrames,~,~,~,~,frames] = Reader.ReadData(folderName,movieNames{i});
        
        for k = 1:nFrames
            imwrite( frames(:,:,:,k), ...
                strcat('.\data\clip',num2str(i),'\frame_',num2str(k),'.bmp') , 'bmp');
               
%                 strcat(folderName,fileName,'frame_',num2str(k),'.bmp') , 'bmp');
        end
        toc;
    end
    
end

function CalculateSaliency(folderName, mode)

    if nargin<2
        mode = 'gbvs';
    end
    
    movieNames = {'actioncliptrain00240.avi', ...
                'actioncliptrain00264.avi', ...
                'actioncliptrain00135.avi', ...
                'actioncliptrain00141.avi', ...
                'actioncliptrain00172.avi', ...
                'actioncliptrain00234.avi', ...
                'actioncliptrain00121.avi', ...
                'actioncliptrain00094.avi', ...
                'actioncliptrain00073.avi', ...
                'actioncliptrain00039.avi', ...
                'actioncliptrain00057.avi', ...
                'actioncliptrain00681.avi', ...
                'actioncliptrain00218.avi', ...
                'actioncliptrain00088.avi', ...
                'actioncliptrain00134.avi'};    

    warning('off', 'MATLAB:MKDIR:DirectoryExists');
    
    Reader = ReadFunctions;
    Video = VideoFunctions;

    mkdir(strcat('..\forLeMeur\massVideos\CalculatedSaliency_',mode));
       
    tic;   
    a = 1;
    for i = 1:size(movieNames,2)
        
        fileName = movieNames{i};

        [video,nFrames,vidHeight,vidWidth,~,~,frames] = Reader.ReadData(folderName,fileName);
        mov = Reader.NewMovie(nFrames , vidHeight   ,vidWidth);
        mov = Reader.ReadMovie(mov , video );

        if strcmp( mode , 'gauss' )
            load(strcat('data/OpticalFlowMaps',num2str(i),'.mat'));
            
            for k = 1:nFrames

                [gaussCenterX,gaussCenterY] = GetGaussCenter(opt(:,:,k,1),opt(:,:,k,2));
                gaussCenterX = gaussCenterX * vidWidth;
                gaussCenterY = gaussCenterY * vidHeight;
                
                offsetX = gaussCenterX - vidWidth/2;
                offsetY = gaussCenterY - vidHeight/2;
                
                currentGauss = MyGauss(vidHeight,vidWidth,vidHeight/5,offsetX,offsetY);
                videoSaliencyMap = mat2gray(currentGauss);

                imwrite( videoSaliencyMap, ...
                    strcat('..\forLeMeur\massVideos\CalculatedSaliency_',mode,'\frame_',num2str(a),'.bmp') , 'bmp');
                a = a + 1;
            end
            
        elseif strcmp( mode , 'cigdem' ) 
            
%             avgSaliency = Video.CalculateMeanSaliency( nFrames , saliencyPoints ); 
%             shotBoundaries = Video.DetectShotBoundaries( mov );
%             load(strcat('data/OpticalFlowMaps',num2str(i),'.mat'));
%             [avgFlowOptical] = Video.CreateFlow( 'optical' , shotBoundaries , avgSaliency , mov , 5, opt ); 

            load(strcat('data/OpticalFlowMaps',num2str(i),'.mat'));
            [~ , saliencyMap] = ReadStaticSaliency(a,nFrames,'judd');
            
            for k = 1:nFrames
                
                [gaussCenterX,gaussCenterY] = GetGaussCenter(opt(:,:,k,1),opt(:,:,k,2));
                gaussCenterX = gaussCenterX * vidWidth;
                gaussCenterY = gaussCenterY * vidHeight;
                
                offsetX = gaussCenterX - vidWidth/2;
                offsetY = gaussCenterY - vidHeight/2;
                
                currentGauss = MyGauss(vidHeight,vidWidth,vidHeight/3,offsetX,offsetY);

                videoSaliencyMap = mat2gray(saliencyMap(:,:,k).*currentGauss);

                imwrite( videoSaliencyMap, ...
                    strcat('..\forLeMeur\massVideos\CalculatedSaliency_',mode,'\frame_',num2str(a),'.bmp') , 'bmp');
                a = a + 1;
            end

        else

            [~ , saliencyMap] = Video.CalculateStaticSaliency(mov,mode);

            for k = 1:nFrames
                
                videoSaliencyMap = saliencyMap(:,:,k);
                imwrite( videoSaliencyMap, ...
                    strcat('..\forLeMeur\massVideos\CalculatedSaliency_',mode,'\frame_',num2str(a),'.bmp') , 'bmp');
                a = a + 1;
                
            end

        end
        toc;
    end
    
end

function [score,R] = PlotROC(algorithm,plotColor)

    if nargin < 2
        plotColor = 'b';
    end
    if nargin == 0
        algorithm = 'sr';
    end
    
    Evaluate = EvalFunctions; 
    a = 1;
    for k = [397:597,607:824,862:924,947:1041,1072:1185,1213:1346,1502:1677,1678:1862,1871:1906,1937:2211,2246:2465,2469:2751]
        
        eyeFolder = strcat('../forLeMeur/massVideos/leMeurFixationMaps/frame_',num2str(k),'_saliencyMapGT.bmp');
        salFolder = strcat('../forLeMeur/massVideos/CalculatedSaliency_',algorithm,'/frame_',num2str(k),'.bmp');
        
        currentEye = imread(eyeFolder);
        currentSaliency = imread(salFolder);

        eyeFixation{a} = currentEye(:,:,1);
        saliency{a} = currentSaliency(:,:,1);
        a = a + 1;

    end
    
    [score,R] = Evaluate.CalculateAUCscoreVideo( saliency, eyeFixation, algorithm );
    
    plot(R(:,1),R(:,2),plotColor);
    
end

function outputImage = MyHistMatch(inputImage, targetImage)

    [c,x] = imhist(targetImage); 
    outputImage = histoMatch(inputImage, c, x);
     
end

function f = MyGauss(vidHeight, vidWidth, sigma, centerx , centery)

    [x y]=meshgrid( round(-vidWidth/2)+1:round(vidWidth/2), ...
                    round(-vidHeight/2)+1:round(vidHeight/2));
                
    f = exp( ( -(x-centerx).^2 / (2*sigma^2) ) + ...
           ( -(y-centery).^2 / (2*sigma^2) ) )  ;
    f = f./sum(f(:));
    
end

function [saliencyPoints , saliencyMap] = ReadStaticSaliency(a,nFrames,mode)

    for k = 1:nFrames
        saliencyMap(:,:,k) = im2double(imread( strcat('..\forLeMeur\massVideos\CalculatedSaliency_',mode,'\frame_',num2str(a),'.bmp')));
        a = a + 1;
    end
    
    saliencyPoints = [];
    for k = 1 : nFrames
        frame_map = saliencyMap(:,:,k);
        [r c] = find(frame_map>0);
        sizer = size(r);
        saliencyPoints = [saliencyPoints ; [repmat(k,sizer,1) r c]];

    end
    

end

function [score,totalR] = ReadRValuesFromFiles(algorithm)

    totalR = zeros(12,2);
    for k = 100:100:2000
        R = [];
        load(strcat('data\R_',algorithm,'_',num2str(k),'.mat'));
        totalR = totalR + R;
    end
    
    totalR = totalR / 2000;
    score = trapz(flipdim(totalR(:,1),1),flipdim(totalR(:,2),1));
    
end

function SaveOpticalFlowData

%     movieNames = {'actioncliptrain00240.avi', ...
%                 'actioncliptrain00264.avi', ...
%                 'actioncliptrain00135.avi', ...
%                 'actioncliptrain00141.avi', ...
%                 'actioncliptrain00172.avi', ...
%                 'actioncliptrain00234.avi', ...
%                 'actioncliptrain00121.avi', ...
%                 'actioncliptrain00094.avi', ...
%                 'actioncliptrain00073.avi', ...
%                 'actioncliptrain00039.avi', ...
%                 'actioncliptrain00057.avi', ...
%                 'actioncliptrain00681.avi', ...
%                 'actioncliptrain00218.avi', ...
%                 'actioncliptrain00088.avi', ...
%                 'actioncliptrain00134.avi'};  

    movieNames = {'Diving-Side/001/2538-5_70133.avi', ...
                'Diving-Side/002/2538-11_70015.avi', ...
                'Golf-Swing-Back/001/3283-8_700741.avi', ...
                'Golf-Swing-Back/002/3283-8_701201.avi', ...
                'Golf-Swing-Front/001/7603-4_70159.avi', ...
                'Golf-Swing-Front/002/7608-9_70(2)151.avi', ...
                'Golf-Swing-Side/001/RF1-13207_7015.avi', ...
                'Golf-Swing-Side/002/RF1-11456_70034.avi', ...
                'Kicking-Front/001/778-62_l146.avi', ...
                'Kicking-Front/002/1084-44_l865.avi', ...
                'Kicking-Side/001/3833-15_70577.avi', ...
                'Kicking-Side/002/3833-40_70336.avi', ...
                'Lifting/001/3528-8_70514.avi', ...
                'Lifting/002/2502-2_70340.avi', ...
                'Riding-Horse/001/4456-16_700040.avi', ...
                'Riding-Horse/002/4456-16_700165.avi', ...
                'Run-Side/001/2670-5_70111.avi', ...
                'Run-Side/002/5238-17_700000.avi', ...
                'SkateBoarding-Front/001/708-75070.avi', ...
                'SkateBoarding-Front/002/708-77009.avi', ...
                'Swing-Bench/001/669-60084.avi', ...
                'Swing-Bench/002/669-60176.avi', ...
                'Swing-SideAngle/001/vid1_0117.avi', ...
                'Swing-SideAngle/002/vid1_0461.avi', ...
                'Walk-Front/001/3206-12_70000.avi',...
                'Walk-Front/002/5561-7_70102.avi'};  
    
    
    Reader = ReadFunctions;
    Video = VideoFunctions;
   
%     folderName = '../Hollywood2-actions/Hollywood2/AVIClips/';
    folderName = '../ucf/ucf/';
    
    for i = 1:size(movieNames,2)
        
        fileName = movieNames{i};

        [video,nFrames,vidHeight,vidWidth,~,~,frames] = Reader.ReadData(folderName,fileName);
        mov = Reader.NewMovie(nFrames , vidHeight   ,vidWidth);
        mov = Reader.ReadMovie(mov , video );
        
        [flowX,flowY] = Video.OpticalFlowMap( mov ); 
        opt = cat(4,flowX,flowY);
        save(strcat(folderName,fileName,'_opticalFlow.mat'),'opt');
        
    end
    
end

function SaveHomographyData
    movieNames = {'actioncliptrain00240.avi', ...
                'actioncliptrain00264.avi', ...
                'actioncliptrain00135.avi', ...
                'actioncliptrain00141.avi', ...
                'actioncliptrain00172.avi', ...
                'actioncliptrain00234.avi', ...
                'actioncliptrain00121.avi', ...
                'actioncliptrain00094.avi', ...
                'actioncliptrain00073.avi', ...
                'actioncliptrain00039.avi', ...
                'actioncliptrain00057.avi', ...
                'actioncliptrain00681.avi', ...
                'actioncliptrain00218.avi', ...
                'actioncliptrain00088.avi', ...
                'actioncliptrain00134.avi'};   
    
    Reader = ReadFunctions;
    Video = VideoFunctions;
   
    for i = 1:size(movieNames,2)
        
        fileName = movieNames{i};

        [video,nFrames,vidHeight,vidWidth,~,~,frames] = Reader.ReadData('../Hollywood2-actions/Hollywood2/AVIClips/',fileName);
        mov = Reader.NewMovie(nFrames , vidHeight   ,vidWidth);
        mov = Reader.ReadMovie(mov , video );
        
        h = Video.CalculateHomography( mov ); 
        save(strcat('data/HomographyMatrices',num2str(i),'.mat'),'h');
        
    end
    
end

function SaveImprovedTrajectoriesDescriptors()

    movieNames = {'Diving-Side/001/2538-5_70133.avi', ...
                    'Diving-Side/002/2538-11_70015.avi', ...
                    'Golf-Swing-Back/001/3283-8_700741.avi', ...
                    'Golf-Swing-Back/002/3283-8_701201.avi', ...
                    'Golf-Swing-Front/001/7603-4_70159.avi', ...
                    'Golf-Swing-Front/002/7608-9_70(2)151.avi', ...
                    'Golf-Swing-Side/001/RF1-13207_7015.avi', ...
                    'Golf-Swing-Side/002/RF1-11456_70034.avi', ...
                    'Kicking-Front/001/778-62_l146.avi', ...
                    'Kicking-Front/002/1084-44_l865.avi', ...
                    'Kicking-Side/001/3833-15_70577.avi', ...
                    'Kicking-Side/002/3833-40_70336.avi', ...
                    'Lifting/001/3528-8_70514.avi', ...
                    'Lifting/002/2502-2_70340.avi', ...
                    'Riding-Horse/001/4456-16_700040.avi', ...
                    'Riding-Horse/002/4456-16_700165.avi', ...
                    'Run-Side/001/2670-5_70111.avi', ...
                    'Run-Side/002/5238-17_700000.avi', ...
                    'SkateBoarding-Front/001/708-75070.avi', ...
                    'SkateBoarding-Front/002/708-77009.avi', ...
                    'Swing-Bench/001/669-60084.avi', ...
                    'Swing-Bench/002/669-60176.avi', ...
                    'Swing-SideAngle/001/vid1_0117.avi', ...
                    'Swing-SideAngle/002/vid1_0461.avi', ...
                    'Walk-Front/001/3206-12_70000.avi',...
                    'Walk-Front/002/5561-7_70102.avi'};  
             
    ImprovedT = ImprovedTrajectories;            
     
    folderName = '../ucf/ucf/';
    tic;
    for i = 1:size(movieNames,2)
        
        fileName = movieNames{i};
        [status, exeOutput] = ImprovedT.RunImpTrajectories([folderName,fileName]);
        save('tmp.mat','exeOutput');
        if status == 0
            trajectory = ImprovedT.AnalyzeOutput(exeOutput);
        else
            break;
        end
        
        save(strcat(folderName,fileName,'_ImprovedTrajectory.mat'),'trajectory');
        toc;
    end
    
end

function [inputsX,inputsY,outputsX,outputsY] = PrepareIOForNN_OpticalFlow()

    inputsX = [];    outputsX = [];    
    inputsY = [];    outputsY = [];   
    
    horPatchNumber = 5;
    verPatchNumber = 3;
    
    folderName = '../ucf/ucf/';
    movieNames = {'Diving-Side/001/2538-5_70133.avi', ...
                'Diving-Side/002/2538-11_70015.avi', ...
                'Golf-Swing-Back/001/3283-8_700741.avi', ...
                'Golf-Swing-Back/002/3283-8_701201.avi', ...
                'Golf-Swing-Front/001/7603-4_70159.avi', ...
                'Golf-Swing-Front/002/7608-9_70(2)151.avi', ...
                'Golf-Swing-Side/001/RF1-13207_7015.avi', ...
                'Golf-Swing-Side/002/RF1-11456_70034.avi', ...
                'Kicking-Front/001/778-62_l146.avi', ...
                'Kicking-Front/002/1084-44_l865.avi', ...
                'Kicking-Side/001/3833-15_70577.avi', ...
                'Kicking-Side/002/3833-40_70336.avi', ...
                'Lifting/001/3528-8_70514.avi', ...
                'Lifting/002/2502-2_70340.avi', ...
                'Riding-Horse/001/4456-16_700040.avi', ...
                'Riding-Horse/002/4456-16_700165.avi' ...
                'Run-Side/001/2670-5_70111.avi', ...
                'Run-Side/002/5238-17_700000.avi', ...
                'SkateBoarding-Front/001/708-75070.avi', ...
                'SkateBoarding-Front/002/708-77009.avi', ...
                'Swing-Bench/001/669-60084.avi', ...
                'Swing-Bench/002/669-60176.avi', ...
                'Swing-SideAngle/001/vid1_0117.avi', ...
                'Swing-SideAngle/002/vid1_0461.avi', ...
                'Walk-Front/001/3206-12_70000.avi',...
                'Walk-Front/002/5561-7_70102.avi'};  
            
    tic;
    for k = 1:size(movieNames,2)
        
        load(strcat(folderName,movieNames{k},'_opticalFlow.mat'));
        [frameHeight , frameWidth, frameNumber , ~] = size(opt);
        verPatchSize = floor(frameHeight / verPatchNumber);
        horPatchSize = floor(frameWidth / horPatchNumber);
        
        for t = 2:frameNumber-1
            
            regexResult = regexp(movieNames(k),'/','split');
            eyeFolder = strcat(folderName,regexResult{1}{1},'/', ...
                regexResult{1}{2},'/frame_',num2str(t),'_saliencyMapGT.bmp');
            
            currentEye = imread(eyeFolder);
            currentEye = currentEye(:,:,1);
            [~,ind] = max(currentEye(:));
            [y,x]=ind2sub(size(currentEye),ind);
%             y = ceil(y/verPatchSize);
%             x = ceil(x/horPatchSize);
            
            opticalFlowX = opt(:,:,t,1);
            opticalFlowY = opt(:,:,t,2);
%             opticalFlowX = mat2gray(opticalFlowX(:,:,:));
%             opticalFlowY = mat2gray(opticalFlowY(:,:,:));
            
            patchIndex = 1;
            for i = 1:horPatchSize:frameWidth-10
                for j = 1:verPatchSize:frameHeight-10
                    currentPatchX = opticalFlowX(j:j+verPatchSize-1,i:i+horPatchSize-1);
                    currentPatchY = opticalFlowY(j:j+verPatchSize-1,i:i+horPatchSize-1);
                    patchMeanX(patchIndex) = (mean(currentPatchX(:)));
                    patchMeanY(patchIndex) = (mean(currentPatchY(:)));
                    patchIndex = patchIndex + 1;
                end
            end


            % normalize the input/output data
            patchMeanX =  patchMeanX/max(patchMeanX);
            patchMeanY =  patchMeanY/max(patchMeanY);
%             patchMeanX =  mapminmax(patchMeanX);
%             patchMeanY =  mapminmax(patchMeanY);
%             max(patchMeanX)
%             min(patchMeanX)
            x =  x/frameWidth;
            y =  y/frameHeight;

            inputsX = [inputsX,patchMeanX'];
            inputsY = [inputsY,patchMeanY'];
            outputsX = [outputsX, x];
            outputsY = [outputsY, y];

        end
        toc;
    end
end

function [inputs,outputs] = PrepareIOForNN_Trajectory()

    inputs = [];    
    outputs = [];    
    %                 'Diving-Side/002/2538-11_70015.avi', ...
    folderName = '../ucf/ucf/';
    movieNames = {'Diving-Side/001/2538-5_70133.avi', ...
                'Golf-Swing-Back/001/3283-8_700741.avi', ...
                'Golf-Swing-Back/002/3283-8_701201.avi', ...
                'Golf-Swing-Front/001/7603-4_70159.avi', ...
                'Golf-Swing-Front/002/7608-9_70(2)151.avi', ...
                'Golf-Swing-Side/001/RF1-13207_7015.avi', ...
                'Golf-Swing-Side/002/RF1-11456_70034.avi', ...
                'Kicking-Front/001/778-62_l146.avi', ...
                'Kicking-Front/002/1084-44_l865.avi', ...
                'Kicking-Side/001/3833-15_70577.avi', ...
                'Kicking-Side/002/3833-40_70336.avi', ...
                'Lifting/001/3528-8_70514.avi', ...
                'Lifting/002/2502-2_70340.avi', ...
                'Riding-Horse/001/4456-16_700040.avi', ...
                'Riding-Horse/002/4456-16_700165.avi' ...
                'Run-Side/001/2670-5_70111.avi', ...
                'Run-Side/002/5238-17_700000.avi', ...
                'SkateBoarding-Front/001/708-75070.avi', ...
                'SkateBoarding-Front/002/708-77009.avi', ...
                'Swing-Bench/001/669-60084.avi', ...
                'Swing-Bench/002/669-60176.avi', ...
                'Swing-SideAngle/001/vid1_0117.avi', ...
                'Swing-SideAngle/002/vid1_0461.avi'}; 
%                    'Walk-Front/001/3206-12_70000.avi',...
%                 'Walk-Front/002/5561-7_70102.avi'};  
            
    tic;
    ImpTrajectory = ImprovedTrajectories;
    for k = 1:size(movieNames,2)
        
        load(strcat(folderName,movieNames{k},'_ImprovedTrajectory.mat'));
        load(strcat(folderName,movieNames{k},'_opticalFlow.mat'));
        [frameHeight , frameWidth, frameNumber , ~] = size(opt);
%         trajectoriesByFrames = ImpTrajectory.GetTrajectoriesByFrame(trajectory);
%         save(strcat(folderName,movieNames{k},'_ImprovedTrajectory.mat'),'trajectoriesByFrames','-append');
        
        for t = 1:frameNumber-1
            
            regexResult = regexp(movieNames(k),'/','split');
            eyeFolder = strcat(folderName,regexResult{1}{1},'/', ...
                regexResult{1}{2},'/frame_',num2str(t),'_saliencyMapGT.bmp');
            
            currentEye = imread(eyeFolder);
            currentEye = currentEye(:,:,1);
            [~,ind] = max(currentEye(:));
            [y,x]=ind2sub(size(currentEye),ind);
            
            meanTrajectoriesX   = mean(trajectoriesByFrames{t}(1,:));
            meanTrajectoriesY   = mean(trajectoriesByFrames{t}(2,:));
            meanTrajectoriesHOF = mean(trajectoriesByFrames{t}(3:end,:),2);
            
            % normalize the input/output data
            x =  x/frameWidth;
            y =  y/frameHeight;

            inputs = [inputs,[meanTrajectoriesX;meanTrajectoriesY;meanTrajectoriesHOF]];
            outputs = [outputs, [x;y]];

        end
        toc;
    end
    save('inputs.mat','inputs','outputs');
end

function TrainGaussCenterPredicter()

%     [inputsX,inputsY,outputsX,outputsY] = PrepareIOForNN();
    load('inputs.mat')

    nnet = feedforwardnet(5);
%     nnet.trainFcn = 'trainscg';
    [nnet,tr] = train(nnet,inputs(1:2,1:900),outputs(:,1:900)); 
    
    predictedClass = nnet(inputs(1:2,1:900));    
    predictedClass = predictedClass';
    actualClass = outputs(:,1:900)';
    errorRate = mean(abs(predictedClass - actualClass))
    
    predictedClass = nnet(inputs(1:2,901:end));    
    predictedClass = predictedClass';
    actualClass = outputs(:,901:end)';
    errorRate = mean(abs(predictedClass - actualClass))
%     
%     nnetY = feedforwardnet(5);
% %     nnet.trainFcn = 'trainscg';
%     [nnetY,tr] = train(nnetY,inputsY(:,1:300),outputsY(:,1:300)); 
%     predictedClassY = nnetY(inputsY(:,300:end));    
%     predictedClassY = predictedClassY';
%     actualClass = outputsY(:,300:end)';
%     errorRateY = mean(abs(predictedClassY - actualClass))

%     save('data/GaussCenterPredicter.mat' , 'nnetX' , 'nnetY');
    
end

function [x,y] = GetGaussCenter(opticalFlowX,opticalFlowY)

    [frameHeight , frameWidth] = size(opticalFlowX);
    verPatchSize = floor(frameHeight / 3);
    horPatchSize = floor(frameWidth / 5);
    
%     currentOpticalFlow = sqrt(opticalFlowX.^2 + opticalFlowY.^2);

    patchIndex = 1;
    for i = 1:horPatchSize:frameWidth-10
        for j = 1:verPatchSize:frameHeight-10
            currentPatchX = opticalFlowX(j:j+verPatchSize-1,i:i+horPatchSize-1);
            currentPatchY = opticalFlowY(j:j+verPatchSize-1,i:i+horPatchSize-1);
            patchesX(patchIndex) = mean(currentPatchX(:));
            patchesY(patchIndex) = mean(currentPatchY(:));
            patchIndex = patchIndex+1;
        end
    end

    load('data/GaussCenterPredicter.mat');
    x = nnetX(patchesX');
    y = nnetY(patchesY');

end




% saliencyMapIndex ~= [397:597,607:824,862:924,947:1041,1072:1185,1213:1346,...
% 1502:1677,1678:1862,1871:1906,1937:2211,2246:2465,2469:2751]





